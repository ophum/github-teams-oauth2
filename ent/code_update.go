// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ophum/github-teams-oauth2/ent/code"
	"github.com/ophum/github-teams-oauth2/ent/group"
	"github.com/ophum/github-teams-oauth2/ent/predicate"
	"github.com/ophum/github-teams-oauth2/ent/user"
)

// CodeUpdate is the builder for updating Code entities.
type CodeUpdate struct {
	config
	hooks    []Hook
	mutation *CodeMutation
}

// Where appends a list predicates to the CodeUpdate builder.
func (cu *CodeUpdate) Where(ps ...predicate.Code) *CodeUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCode sets the "code" field.
func (cu *CodeUpdate) SetCode(s string) *CodeUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CodeUpdate) SetNillableCode(s *string) *CodeUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetClientID sets the "client_id" field.
func (cu *CodeUpdate) SetClientID(s string) *CodeUpdate {
	cu.mutation.SetClientID(s)
	return cu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cu *CodeUpdate) SetNillableClientID(s *string) *CodeUpdate {
	if s != nil {
		cu.SetClientID(*s)
	}
	return cu
}

// SetScope sets the "scope" field.
func (cu *CodeUpdate) SetScope(s string) *CodeUpdate {
	cu.mutation.SetScope(s)
	return cu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (cu *CodeUpdate) SetNillableScope(s *string) *CodeUpdate {
	if s != nil {
		cu.SetScope(*s)
	}
	return cu
}

// SetRedirectURI sets the "redirect_uri" field.
func (cu *CodeUpdate) SetRedirectURI(s string) *CodeUpdate {
	cu.mutation.SetRedirectURI(s)
	return cu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (cu *CodeUpdate) SetNillableRedirectURI(s *string) *CodeUpdate {
	if s != nil {
		cu.SetRedirectURI(*s)
	}
	return cu
}

// SetCodeChallenge sets the "code_challenge" field.
func (cu *CodeUpdate) SetCodeChallenge(s string) *CodeUpdate {
	cu.mutation.SetCodeChallenge(s)
	return cu
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (cu *CodeUpdate) SetNillableCodeChallenge(s *string) *CodeUpdate {
	if s != nil {
		cu.SetCodeChallenge(*s)
	}
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CodeUpdate) SetExpiresAt(t time.Time) *CodeUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CodeUpdate) SetNillableExpiresAt(t *time.Time) *CodeUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cu *CodeUpdate) SetUserID(id uuid.UUID) *CodeUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cu *CodeUpdate) SetNillableUserID(id *uuid.UUID) *CodeUpdate {
	if id != nil {
		cu = cu.SetUserID(*id)
	}
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CodeUpdate) SetUser(u *User) *CodeUpdate {
	return cu.SetUserID(u.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (cu *CodeUpdate) AddGroupIDs(ids ...uuid.UUID) *CodeUpdate {
	cu.mutation.AddGroupIDs(ids...)
	return cu
}

// AddGroups adds the "groups" edges to the Group entity.
func (cu *CodeUpdate) AddGroups(g ...*Group) *CodeUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.AddGroupIDs(ids...)
}

// Mutation returns the CodeMutation object of the builder.
func (cu *CodeUpdate) Mutation() *CodeMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CodeUpdate) ClearUser() *CodeUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearGroups clears all "groups" edges to the Group entity.
func (cu *CodeUpdate) ClearGroups() *CodeUpdate {
	cu.mutation.ClearGroups()
	return cu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (cu *CodeUpdate) RemoveGroupIDs(ids ...uuid.UUID) *CodeUpdate {
	cu.mutation.RemoveGroupIDs(ids...)
	return cu
}

// RemoveGroups removes "groups" edges to Group entities.
func (cu *CodeUpdate) RemoveGroups(g ...*Group) *CodeUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CodeUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CodeUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CodeUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(code.Table, code.Columns, sqlgraph.NewFieldSpec(code.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(code.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.ClientID(); ok {
		_spec.SetField(code.FieldClientID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Scope(); ok {
		_spec.SetField(code.FieldScope, field.TypeString, value)
	}
	if value, ok := cu.mutation.RedirectURI(); ok {
		_spec.SetField(code.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := cu.mutation.CodeChallenge(); ok {
		_spec.SetField(code.FieldCodeChallenge, field.TypeString, value)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(code.FieldExpiresAt, field.TypeTime, value)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   code.UserTable,
			Columns: []string{code.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   code.UserTable,
			Columns: []string{code.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   code.GroupsTable,
			Columns: code.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !cu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   code.GroupsTable,
			Columns: code.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   code.GroupsTable,
			Columns: code.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{code.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CodeUpdateOne is the builder for updating a single Code entity.
type CodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CodeMutation
}

// SetCode sets the "code" field.
func (cuo *CodeUpdateOne) SetCode(s string) *CodeUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableCode(s *string) *CodeUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetClientID sets the "client_id" field.
func (cuo *CodeUpdateOne) SetClientID(s string) *CodeUpdateOne {
	cuo.mutation.SetClientID(s)
	return cuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableClientID(s *string) *CodeUpdateOne {
	if s != nil {
		cuo.SetClientID(*s)
	}
	return cuo
}

// SetScope sets the "scope" field.
func (cuo *CodeUpdateOne) SetScope(s string) *CodeUpdateOne {
	cuo.mutation.SetScope(s)
	return cuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableScope(s *string) *CodeUpdateOne {
	if s != nil {
		cuo.SetScope(*s)
	}
	return cuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (cuo *CodeUpdateOne) SetRedirectURI(s string) *CodeUpdateOne {
	cuo.mutation.SetRedirectURI(s)
	return cuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableRedirectURI(s *string) *CodeUpdateOne {
	if s != nil {
		cuo.SetRedirectURI(*s)
	}
	return cuo
}

// SetCodeChallenge sets the "code_challenge" field.
func (cuo *CodeUpdateOne) SetCodeChallenge(s string) *CodeUpdateOne {
	cuo.mutation.SetCodeChallenge(s)
	return cuo
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableCodeChallenge(s *string) *CodeUpdateOne {
	if s != nil {
		cuo.SetCodeChallenge(*s)
	}
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CodeUpdateOne) SetExpiresAt(t time.Time) *CodeUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableExpiresAt(t *time.Time) *CodeUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuo *CodeUpdateOne) SetUserID(id uuid.UUID) *CodeUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cuo *CodeUpdateOne) SetNillableUserID(id *uuid.UUID) *CodeUpdateOne {
	if id != nil {
		cuo = cuo.SetUserID(*id)
	}
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CodeUpdateOne) SetUser(u *User) *CodeUpdateOne {
	return cuo.SetUserID(u.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (cuo *CodeUpdateOne) AddGroupIDs(ids ...uuid.UUID) *CodeUpdateOne {
	cuo.mutation.AddGroupIDs(ids...)
	return cuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (cuo *CodeUpdateOne) AddGroups(g ...*Group) *CodeUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.AddGroupIDs(ids...)
}

// Mutation returns the CodeMutation object of the builder.
func (cuo *CodeUpdateOne) Mutation() *CodeMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CodeUpdateOne) ClearUser() *CodeUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearGroups clears all "groups" edges to the Group entity.
func (cuo *CodeUpdateOne) ClearGroups() *CodeUpdateOne {
	cuo.mutation.ClearGroups()
	return cuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (cuo *CodeUpdateOne) RemoveGroupIDs(ids ...uuid.UUID) *CodeUpdateOne {
	cuo.mutation.RemoveGroupIDs(ids...)
	return cuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (cuo *CodeUpdateOne) RemoveGroups(g ...*Group) *CodeUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the CodeUpdate builder.
func (cuo *CodeUpdateOne) Where(ps ...predicate.Code) *CodeUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CodeUpdateOne) Select(field string, fields ...string) *CodeUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Code entity.
func (cuo *CodeUpdateOne) Save(ctx context.Context) (*Code, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CodeUpdateOne) SaveX(ctx context.Context) *Code {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CodeUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CodeUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CodeUpdateOne) sqlSave(ctx context.Context) (_node *Code, err error) {
	_spec := sqlgraph.NewUpdateSpec(code.Table, code.Columns, sqlgraph.NewFieldSpec(code.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Code.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, code.FieldID)
		for _, f := range fields {
			if !code.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != code.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(code.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ClientID(); ok {
		_spec.SetField(code.FieldClientID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Scope(); ok {
		_spec.SetField(code.FieldScope, field.TypeString, value)
	}
	if value, ok := cuo.mutation.RedirectURI(); ok {
		_spec.SetField(code.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CodeChallenge(); ok {
		_spec.SetField(code.FieldCodeChallenge, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(code.FieldExpiresAt, field.TypeTime, value)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   code.UserTable,
			Columns: []string{code.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   code.UserTable,
			Columns: []string{code.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   code.GroupsTable,
			Columns: code.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !cuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   code.GroupsTable,
			Columns: code.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   code.GroupsTable,
			Columns: code.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Code{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{code.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
