// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ophum/github-teams-oauth2/ent/code"
	"github.com/ophum/github-teams-oauth2/ent/group"
	"github.com/ophum/github-teams-oauth2/ent/user"
)

// Code is the model entity for the Code schema.
type Code struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope string `json:"scope,omitempty"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI string `json:"redirect_uri,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodeQuery when eager-loading is set.
	Edges        CodeEdges `json:"edges"`
	group_codes  *uuid.UUID
	user_codes   *uuid.UUID
	selectValues sql.SelectValues
}

// CodeEdges holds the relations/edges for other nodes in the graph.
type CodeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodeEdges) GroupOrErr() (*Group, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Code) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case code.FieldCode, code.FieldClientID, code.FieldScope, code.FieldRedirectURI:
			values[i] = new(sql.NullString)
		case code.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case code.FieldID:
			values[i] = new(uuid.UUID)
		case code.ForeignKeys[0]: // group_codes
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case code.ForeignKeys[1]: // user_codes
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Code fields.
func (c *Code) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case code.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case code.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case code.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				c.ClientID = value.String
			}
		case code.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				c.Scope = value.String
			}
		case code.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				c.RedirectURI = value.String
			}
		case code.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				c.ExpiresAt = value.Time
			}
		case code.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field group_codes", values[i])
			} else if value.Valid {
				c.group_codes = new(uuid.UUID)
				*c.group_codes = *value.S.(*uuid.UUID)
			}
		case code.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_codes", values[i])
			} else if value.Valid {
				c.user_codes = new(uuid.UUID)
				*c.user_codes = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Code.
// This includes values selected through modifiers, order, etc.
func (c *Code) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Code entity.
func (c *Code) QueryUser() *UserQuery {
	return NewCodeClient(c.config).QueryUser(c)
}

// QueryGroup queries the "group" edge of the Code entity.
func (c *Code) QueryGroup() *GroupQuery {
	return NewCodeClient(c.config).QueryGroup(c)
}

// Update returns a builder for updating this Code.
// Note that you need to call Code.Unwrap() before calling this method if this Code
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Code) Update() *CodeUpdateOne {
	return NewCodeClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Code entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Code) Unwrap() *Code {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Code is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Code) String() string {
	var builder strings.Builder
	builder.WriteString("Code(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(c.ClientID)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(c.Scope)
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(c.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(c.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Codes is a parsable slice of Code.
type Codes []*Code
